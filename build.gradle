buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'biz.aQute.bnd.builder' version '5.3.0' // OSGi
    // OSGi bundle is configured through the bnd.bnd file
    id 'maven-publish'
    id 'signing'
}

version = '0.7.1-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = '1.9'
targetCompatibility = '1.9'

group = 'org.fxmisc.flowless'
project.archivesBaseName = 'flowless'

dependencies {
    implementation 'org.reactfx:reactfx:2.0-M5'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation "org.testfx:testfx-core:4.0.11-alpha"
    testImplementation ("org.testfx:testfx-junit:4.0.11-alpha") {
        exclude(group: "junit", module: "junit")
    }
    testImplementation "org.testfx:openjfx-monocle:8u76-b04"
}

jar {
    manifest {
        attributes(
            'Automatic-Module-Name': 'org.fxmisc.flowless'
        )
    }
}

javadoc {
    // ignore missing Javadoc comments or tags
    options.addStringOption('Xdoclint:all,-missing', '-quiet')

    // support for JavaFX properties
    options.addBooleanOption('javafx', true)

    options.links = [
            // resolve links to Java and JavaFX Javadocs
            'http://docs.oracle.com/javase/9/docs/api/',
            'http://docs.oracle.com/javase/9/javafx/api/',

            // resolve links to ReactFX
            'https://www.javadoc.io/doc/org.reactfx/reactfx/2.0-M5/'
    ]
}

task fatJar(type: Jar, dependsOn: classes) {
    archiveAppendix = 'fat'
    manifest.attributes( 'Automatic-Module-Name': 'org.fxmisc.flowless' )
    from sourceSets.main.output
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

def doUploadArchives = project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
publish.onlyIf { doUploadArchives }

if(doUploadArchives) {
    publishing {
        repositories {
            maven {
               def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
               def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
               url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = "${sonatypeUsername}"
                    password = "${sonatypePassword}"
                }
            }
        }
        publications {
            flowless(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'flowless'
                    packaging = 'jar'
                    description = 'Efficient VirtualFlow for JavaFX.'
                    url = 'https://github.com/FXMisc/Flowless/#flowless'
               
                    scm {
                        url = 'scm:git@github.com:FXMisc/flowless.git'
                        connection = 'scm:git@github.com:FXMisc/Flowless.git'
                        developerConnection = 'scm:git@github.com:FXMisc/Flowless.git'
                    }
               
                    licenses {
                        license {
                            name = 'The BSD 2-Clause License'
                            url = 'http://opensource.org/licenses/BSD-2-Clause'
                            distribution = 'repo'
                        }
                    }
               
                    developers {
                        developer {
                            name = 'Tomas Mikula'
                        }
                        developer {
                            name = 'Jordan Martinez'
                        }
                   }
                }
            }
        }
    }
    
    signing {
        sign publishing.publications.flowless
    }
}

assemble.dependsOn fatJar

task getVersion {
    doLast {
        println version
    }
}
